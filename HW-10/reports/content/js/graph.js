/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 67.0, "minX": 0.0, "maxY": 148647.0, "series": [{"data": [[0.0, 67.0], [0.1, 67.0], [0.2, 68.0], [0.3, 68.0], [0.4, 78.0], [0.5, 79.0], [0.6, 79.0], [0.7, 83.0], [0.8, 83.0], [0.9, 89.0], [1.0, 90.0], [1.1, 90.0], [1.2, 95.0], [1.3, 95.0], [1.4, 97.0], [1.5, 98.0], [1.6, 98.0], [1.7, 98.0], [1.8, 98.0], [1.9, 101.0], [2.0, 103.0], [2.1, 103.0], [2.2, 104.0], [2.3, 104.0], [2.4, 107.0], [2.5, 108.0], [2.6, 108.0], [2.7, 110.0], [2.8, 110.0], [2.9, 114.0], [3.0, 118.0], [3.1, 118.0], [3.2, 122.0], [3.3, 122.0], [3.4, 123.0], [3.5, 125.0], [3.6, 125.0], [3.7, 126.0], [3.8, 126.0], [3.9, 139.0], [4.0, 141.0], [4.1, 141.0], [4.2, 153.0], [4.3, 153.0], [4.4, 158.0], [4.5, 160.0], [4.6, 160.0], [4.7, 162.0], [4.8, 162.0], [4.9, 171.0], [5.0, 171.0], [5.1, 171.0], [5.2, 177.0], [5.3, 177.0], [5.4, 178.0], [5.5, 178.0], [5.6, 178.0], [5.7, 181.0], [5.8, 181.0], [5.9, 187.0], [6.0, 188.0], [6.1, 188.0], [6.2, 191.0], [6.3, 191.0], [6.4, 195.0], [6.5, 195.0], [6.6, 195.0], [6.7, 198.0], [6.8, 198.0], [6.9, 198.0], [7.0, 205.0], [7.1, 205.0], [7.2, 207.0], [7.3, 207.0], [7.4, 211.0], [7.5, 211.0], [7.6, 212.0], [7.7, 212.0], [7.8, 212.0], [7.9, 216.0], [8.0, 224.0], [8.1, 224.0], [8.2, 226.0], [8.3, 226.0], [8.4, 235.0], [8.5, 240.0], [8.6, 240.0], [8.7, 247.0], [8.8, 247.0], [8.9, 247.0], [9.0, 251.0], [9.1, 251.0], [9.2, 256.0], [9.3, 256.0], [9.4, 258.0], [9.5, 259.0], [9.6, 259.0], [9.7, 259.0], [9.8, 259.0], [9.9, 264.0], [10.0, 271.0], [10.1, 271.0], [10.2, 281.0], [10.3, 281.0], [10.4, 284.0], [10.5, 289.0], [10.6, 289.0], [10.7, 291.0], [10.8, 291.0], [10.9, 293.0], [11.0, 303.0], [11.1, 303.0], [11.2, 311.0], [11.3, 311.0], [11.4, 316.0], [11.5, 335.0], [11.6, 335.0], [11.7, 338.0], [11.8, 338.0], [11.9, 341.0], [12.0, 346.0], [12.1, 346.0], [12.2, 357.0], [12.3, 357.0], [12.4, 371.0], [12.5, 397.0], [12.6, 397.0], [12.7, 398.0], [12.8, 398.0], [12.9, 437.0], [13.0, 451.0], [13.1, 451.0], [13.2, 460.0], [13.3, 460.0], [13.4, 478.0], [13.5, 482.0], [13.6, 482.0], [13.7, 506.0], [13.8, 506.0], [13.9, 522.0], [14.0, 534.0], [14.1, 534.0], [14.2, 548.0], [14.3, 548.0], [14.4, 557.0], [14.5, 581.0], [14.6, 581.0], [14.7, 585.0], [14.8, 585.0], [14.9, 669.0], [15.0, 696.0], [15.1, 696.0], [15.2, 715.0], [15.3, 715.0], [15.4, 731.0], [15.5, 735.0], [15.6, 735.0], [15.7, 747.0], [15.8, 747.0], [15.9, 787.0], [16.0, 835.0], [16.1, 835.0], [16.2, 862.0], [16.3, 862.0], [16.4, 902.0], [16.5, 905.0], [16.6, 905.0], [16.7, 907.0], [16.8, 907.0], [16.9, 925.0], [17.0, 993.0], [17.1, 993.0], [17.2, 995.0], [17.3, 995.0], [17.4, 1001.0], [17.5, 1003.0], [17.6, 1003.0], [17.7, 1024.0], [17.8, 1024.0], [17.9, 1038.0], [18.0, 1091.0], [18.1, 1091.0], [18.2, 1120.0], [18.3, 1120.0], [18.4, 1131.0], [18.5, 1144.0], [18.6, 1144.0], [18.7, 1152.0], [18.8, 1152.0], [18.9, 1159.0], [19.0, 1181.0], [19.1, 1181.0], [19.2, 1190.0], [19.3, 1190.0], [19.4, 1220.0], [19.5, 1227.0], [19.6, 1227.0], [19.7, 1234.0], [19.8, 1234.0], [19.9, 1241.0], [20.0, 1241.0], [20.1, 1259.0], [20.2, 1314.0], [20.3, 1314.0], [20.4, 1322.0], [20.5, 1322.0], [20.6, 1361.0], [20.7, 1362.0], [20.8, 1362.0], [20.9, 1382.0], [21.0, 1382.0], [21.1, 1396.0], [21.2, 1400.0], [21.3, 1400.0], [21.4, 1411.0], [21.5, 1411.0], [21.6, 1441.0], [21.7, 1446.0], [21.8, 1446.0], [21.9, 1501.0], [22.0, 1501.0], [22.1, 1563.0], [22.2, 1576.0], [22.3, 1576.0], [22.4, 1605.0], [22.5, 1605.0], [22.6, 1638.0], [22.7, 1641.0], [22.8, 1641.0], [22.9, 1666.0], [23.0, 1666.0], [23.1, 1701.0], [23.2, 1751.0], [23.3, 1751.0], [23.4, 1758.0], [23.5, 1758.0], [23.6, 1776.0], [23.7, 1782.0], [23.8, 1782.0], [23.9, 1796.0], [24.0, 1796.0], [24.1, 1799.0], [24.2, 1820.0], [24.3, 1820.0], [24.4, 1849.0], [24.5, 1849.0], [24.6, 1938.0], [24.7, 2048.0], [24.8, 2048.0], [24.9, 2058.0], [25.0, 2058.0], [25.1, 2072.0], [25.2, 2248.0], [25.3, 2248.0], [25.4, 2255.0], [25.5, 2255.0], [25.6, 2266.0], [25.7, 2282.0], [25.8, 2282.0], [25.9, 2348.0], [26.0, 2348.0], [26.1, 2384.0], [26.2, 2424.0], [26.3, 2424.0], [26.4, 2430.0], [26.5, 2430.0], [26.6, 2448.0], [26.7, 2524.0], [26.8, 2524.0], [26.9, 2581.0], [27.0, 2581.0], [27.1, 2789.0], [27.2, 2793.0], [27.3, 2793.0], [27.4, 2814.0], [27.5, 2814.0], [27.6, 2891.0], [27.7, 2933.0], [27.8, 2933.0], [27.9, 3009.0], [28.0, 3009.0], [28.1, 3017.0], [28.2, 3023.0], [28.3, 3023.0], [28.4, 3040.0], [28.5, 3040.0], [28.6, 3041.0], [28.7, 3061.0], [28.8, 3061.0], [28.9, 3094.0], [29.0, 3094.0], [29.1, 3157.0], [29.2, 3214.0], [29.3, 3214.0], [29.4, 3314.0], [29.5, 3314.0], [29.6, 3331.0], [29.7, 3363.0], [29.8, 3363.0], [29.9, 3375.0], [30.0, 3375.0], [30.1, 3376.0], [30.2, 3432.0], [30.3, 3432.0], [30.4, 3445.0], [30.5, 3445.0], [30.6, 3494.0], [30.7, 3511.0], [30.8, 3511.0], [30.9, 3517.0], [31.0, 3517.0], [31.1, 3525.0], [31.2, 3565.0], [31.3, 3565.0], [31.4, 3572.0], [31.5, 3572.0], [31.6, 3651.0], [31.7, 3660.0], [31.8, 3660.0], [31.9, 3680.0], [32.0, 3680.0], [32.1, 3684.0], [32.2, 3688.0], [32.3, 3688.0], [32.4, 3718.0], [32.5, 3718.0], [32.6, 3727.0], [32.7, 3815.0], [32.8, 3815.0], [32.9, 3858.0], [33.0, 3858.0], [33.1, 3878.0], [33.2, 3914.0], [33.3, 3914.0], [33.4, 3924.0], [33.5, 3924.0], [33.6, 3931.0], [33.7, 3951.0], [33.8, 3951.0], [33.9, 3970.0], [34.0, 3970.0], [34.1, 3977.0], [34.2, 3986.0], [34.3, 3986.0], [34.4, 3997.0], [34.5, 3997.0], [34.6, 4030.0], [34.7, 4054.0], [34.8, 4054.0], [34.9, 4085.0], [35.0, 4085.0], [35.1, 4085.0], [35.2, 4095.0], [35.3, 4095.0], [35.4, 4116.0], [35.5, 4116.0], [35.6, 4158.0], [35.7, 4284.0], [35.8, 4284.0], [35.9, 4303.0], [36.0, 4303.0], [36.1, 4377.0], [36.2, 4377.0], [36.3, 4377.0], [36.4, 4388.0], [36.5, 4388.0], [36.6, 4444.0], [36.7, 4452.0], [36.8, 4452.0], [36.9, 4552.0], [37.0, 4552.0], [37.1, 4566.0], [37.2, 4589.0], [37.3, 4589.0], [37.4, 4606.0], [37.5, 4606.0], [37.6, 4613.0], [37.7, 4621.0], [37.8, 4621.0], [37.9, 4757.0], [38.0, 4757.0], [38.1, 4762.0], [38.2, 4789.0], [38.3, 4789.0], [38.4, 4790.0], [38.5, 4790.0], [38.6, 4868.0], [38.7, 4875.0], [38.8, 4875.0], [38.9, 4887.0], [39.0, 4903.0], [39.1, 4903.0], [39.2, 4954.0], [39.3, 4954.0], [39.4, 4972.0], [39.5, 4991.0], [39.6, 4991.0], [39.7, 4999.0], [39.8, 4999.0], [39.9, 5002.0], [40.0, 5023.0], [40.1, 5023.0], [40.2, 5032.0], [40.3, 5032.0], [40.4, 5050.0], [40.5, 5071.0], [40.6, 5071.0], [40.7, 5184.0], [40.8, 5184.0], [40.9, 5248.0], [41.0, 5287.0], [41.1, 5287.0], [41.2, 5418.0], [41.3, 5418.0], [41.4, 5502.0], [41.5, 5511.0], [41.6, 5511.0], [41.7, 5556.0], [41.8, 5556.0], [41.9, 5603.0], [42.0, 5635.0], [42.1, 5635.0], [42.2, 5654.0], [42.3, 5654.0], [42.4, 5662.0], [42.5, 5751.0], [42.6, 5751.0], [42.7, 5753.0], [42.8, 5753.0], [42.9, 5788.0], [43.0, 5828.0], [43.1, 5828.0], [43.2, 5923.0], [43.3, 5923.0], [43.4, 5928.0], [43.5, 5962.0], [43.6, 5962.0], [43.7, 6039.0], [43.8, 6039.0], [43.9, 6051.0], [44.0, 6056.0], [44.1, 6056.0], [44.2, 6060.0], [44.3, 6060.0], [44.4, 6080.0], [44.5, 6175.0], [44.6, 6175.0], [44.7, 6280.0], [44.8, 6280.0], [44.9, 6536.0], [45.0, 6542.0], [45.1, 6542.0], [45.2, 6574.0], [45.3, 6574.0], [45.4, 6618.0], [45.5, 6745.0], [45.6, 6745.0], [45.7, 6760.0], [45.8, 6760.0], [45.9, 6813.0], [46.0, 6873.0], [46.1, 6873.0], [46.2, 6955.0], [46.3, 6955.0], [46.4, 6984.0], [46.5, 7045.0], [46.6, 7045.0], [46.7, 7083.0], [46.8, 7083.0], [46.9, 7093.0], [47.0, 7248.0], [47.1, 7248.0], [47.2, 7329.0], [47.3, 7329.0], [47.4, 7357.0], [47.5, 7364.0], [47.6, 7364.0], [47.7, 7382.0], [47.8, 7382.0], [47.9, 7415.0], [48.0, 7427.0], [48.1, 7427.0], [48.2, 7432.0], [48.3, 7432.0], [48.4, 7442.0], [48.5, 7452.0], [48.6, 7452.0], [48.7, 7477.0], [48.8, 7477.0], [48.9, 7487.0], [49.0, 7500.0], [49.1, 7500.0], [49.2, 7525.0], [49.3, 7525.0], [49.4, 7528.0], [49.5, 7534.0], [49.6, 7534.0], [49.7, 7549.0], [49.8, 7549.0], [49.9, 7568.0], [50.0, 7595.0], [50.1, 7595.0], [50.2, 7615.0], [50.3, 7615.0], [50.4, 7616.0], [50.5, 7640.0], [50.6, 7640.0], [50.7, 7666.0], [50.8, 7666.0], [50.9, 7682.0], [51.0, 7739.0], [51.1, 7739.0], [51.2, 7748.0], [51.3, 7748.0], [51.4, 7777.0], [51.5, 7781.0], [51.6, 7781.0], [51.7, 7805.0], [51.8, 7805.0], [51.9, 7807.0], [52.0, 7818.0], [52.1, 7818.0], [52.2, 7854.0], [52.3, 7854.0], [52.4, 7891.0], [52.5, 7892.0], [52.6, 7892.0], [52.7, 7909.0], [52.8, 7909.0], [52.9, 7947.0], [53.0, 7966.0], [53.1, 7966.0], [53.2, 7974.0], [53.3, 7974.0], [53.4, 7984.0], [53.5, 7997.0], [53.6, 7997.0], [53.7, 8066.0], [53.8, 8066.0], [53.9, 8072.0], [54.0, 8139.0], [54.1, 8139.0], [54.2, 8225.0], [54.3, 8225.0], [54.4, 8319.0], [54.5, 8486.0], [54.6, 8486.0], [54.7, 8495.0], [54.8, 8495.0], [54.9, 8511.0], [55.0, 8544.0], [55.1, 8544.0], [55.2, 8569.0], [55.3, 8569.0], [55.4, 8609.0], [55.5, 8622.0], [55.6, 8622.0], [55.7, 8639.0], [55.8, 8639.0], [55.9, 8672.0], [56.0, 8713.0], [56.1, 8713.0], [56.2, 8733.0], [56.3, 8733.0], [56.4, 8736.0], [56.5, 8873.0], [56.6, 8873.0], [56.7, 8893.0], [56.8, 8893.0], [56.9, 8940.0], [57.0, 8945.0], [57.1, 8945.0], [57.2, 8951.0], [57.3, 8951.0], [57.4, 9004.0], [57.5, 9005.0], [57.6, 9005.0], [57.7, 9189.0], [57.8, 9189.0], [57.9, 9197.0], [58.0, 9293.0], [58.1, 9293.0], [58.2, 9308.0], [58.3, 9308.0], [58.4, 9319.0], [58.5, 9422.0], [58.6, 9422.0], [58.7, 9501.0], [58.8, 9501.0], [58.9, 9855.0], [59.0, 9948.0], [59.1, 9948.0], [59.2, 9980.0], [59.3, 9980.0], [59.4, 9981.0], [59.5, 9995.0], [59.6, 9995.0], [59.7, 9996.0], [59.8, 9996.0], [59.9, 10017.0], [60.0, 10027.0], [60.1, 10027.0], [60.2, 10044.0], [60.3, 10044.0], [60.4, 10069.0], [60.5, 10088.0], [60.6, 10088.0], [60.7, 10099.0], [60.8, 10099.0], [60.9, 10100.0], [61.0, 10129.0], [61.1, 10129.0], [61.2, 10140.0], [61.3, 10140.0], [61.4, 10142.0], [61.5, 10144.0], [61.6, 10144.0], [61.7, 10169.0], [61.8, 10169.0], [61.9, 10182.0], [62.0, 10218.0], [62.1, 10218.0], [62.2, 10224.0], [62.3, 10224.0], [62.4, 10243.0], [62.5, 10251.0], [62.6, 10251.0], [62.7, 10257.0], [62.8, 10257.0], [62.9, 10332.0], [63.0, 10338.0], [63.1, 10338.0], [63.2, 10367.0], [63.3, 10367.0], [63.4, 10382.0], [63.5, 10416.0], [63.6, 10416.0], [63.7, 10631.0], [63.8, 10631.0], [63.9, 10647.0], [64.0, 10684.0], [64.1, 10684.0], [64.2, 10715.0], [64.3, 10715.0], [64.4, 10715.0], [64.5, 10716.0], [64.6, 10716.0], [64.7, 10736.0], [64.8, 10736.0], [64.9, 10766.0], [65.0, 10970.0], [65.1, 10970.0], [65.2, 11055.0], [65.3, 11055.0], [65.4, 11070.0], [65.5, 11097.0], [65.6, 11097.0], [65.7, 11115.0], [65.8, 11115.0], [65.9, 11133.0], [66.0, 11176.0], [66.1, 11176.0], [66.2, 11195.0], [66.3, 11195.0], [66.4, 11228.0], [66.5, 11278.0], [66.6, 11278.0], [66.7, 11289.0], [66.8, 11289.0], [66.9, 11356.0], [67.0, 11419.0], [67.1, 11419.0], [67.2, 11585.0], [67.3, 11585.0], [67.4, 11636.0], [67.5, 11683.0], [67.6, 11683.0], [67.7, 11781.0], [67.8, 11781.0], [67.9, 11803.0], [68.0, 11926.0], [68.1, 11926.0], [68.2, 11975.0], [68.3, 11975.0], [68.4, 12037.0], [68.5, 12046.0], [68.6, 12046.0], [68.7, 12083.0], [68.8, 12083.0], [68.9, 12091.0], [69.0, 12101.0], [69.1, 12101.0], [69.2, 12201.0], [69.3, 12201.0], [69.4, 12203.0], [69.5, 12305.0], [69.6, 12305.0], [69.7, 12307.0], [69.8, 12307.0], [69.9, 12314.0], [70.0, 12324.0], [70.1, 12324.0], [70.2, 12343.0], [70.3, 12343.0], [70.4, 12432.0], [70.5, 12521.0], [70.6, 12521.0], [70.7, 12532.0], [70.8, 12532.0], [70.9, 12555.0], [71.0, 12562.0], [71.1, 12562.0], [71.2, 12627.0], [71.3, 12627.0], [71.4, 12698.0], [71.5, 12714.0], [71.6, 12714.0], [71.7, 12751.0], [71.8, 12751.0], [71.9, 12787.0], [72.0, 12847.0], [72.1, 12847.0], [72.2, 12878.0], [72.3, 12878.0], [72.4, 12889.0], [72.5, 13002.0], [72.6, 13002.0], [72.7, 13006.0], [72.8, 13006.0], [72.9, 13007.0], [73.0, 13050.0], [73.1, 13050.0], [73.2, 13147.0], [73.3, 13147.0], [73.4, 13278.0], [73.5, 13451.0], [73.6, 13451.0], [73.7, 13475.0], [73.8, 13475.0], [73.9, 13482.0], [74.0, 13520.0], [74.1, 13520.0], [74.2, 13521.0], [74.3, 13521.0], [74.4, 13606.0], [74.5, 13955.0], [74.6, 13955.0], [74.7, 14828.0], [74.8, 14828.0], [74.9, 15102.0], [75.0, 15320.0], [75.1, 15320.0], [75.2, 15367.0], [75.3, 15367.0], [75.4, 15477.0], [75.5, 15522.0], [75.6, 15522.0], [75.7, 15684.0], [75.8, 15684.0], [75.9, 15863.0], [76.0, 15967.0], [76.1, 15967.0], [76.2, 16232.0], [76.3, 16232.0], [76.4, 16270.0], [76.5, 16604.0], [76.6, 16604.0], [76.7, 16630.0], [76.8, 16630.0], [76.9, 16682.0], [77.0, 16802.0], [77.1, 16802.0], [77.2, 16804.0], [77.3, 16804.0], [77.4, 16808.0], [77.5, 16808.0], [77.6, 17069.0], [77.7, 17263.0], [77.8, 17263.0], [77.9, 17611.0], [78.0, 17611.0], [78.1, 17681.0], [78.2, 17733.0], [78.3, 17733.0], [78.4, 17825.0], [78.5, 17825.0], [78.6, 18114.0], [78.7, 18378.0], [78.8, 18378.0], [78.9, 18483.0], [79.0, 18483.0], [79.1, 18485.0], [79.2, 18503.0], [79.3, 18503.0], [79.4, 18630.0], [79.5, 18630.0], [79.6, 18671.0], [79.7, 18854.0], [79.8, 18854.0], [79.9, 19343.0], [80.0, 19343.0], [80.1, 19876.0], [80.2, 20064.0], [80.3, 20064.0], [80.4, 20161.0], [80.5, 20161.0], [80.6, 20223.0], [80.7, 20449.0], [80.8, 20449.0], [80.9, 20508.0], [81.0, 20508.0], [81.1, 21373.0], [81.2, 21553.0], [81.3, 21553.0], [81.4, 21587.0], [81.5, 21587.0], [81.6, 21647.0], [81.7, 21725.0], [81.8, 21725.0], [81.9, 21947.0], [82.0, 21947.0], [82.1, 21994.0], [82.2, 22038.0], [82.3, 22038.0], [82.4, 22218.0], [82.5, 22218.0], [82.6, 22309.0], [82.7, 23264.0], [82.8, 23264.0], [82.9, 23347.0], [83.0, 23347.0], [83.1, 23791.0], [83.2, 23979.0], [83.3, 23979.0], [83.4, 25002.0], [83.5, 25002.0], [83.6, 25161.0], [83.7, 25645.0], [83.8, 25645.0], [83.9, 25687.0], [84.0, 25687.0], [84.1, 25766.0], [84.2, 25766.0], [84.3, 25766.0], [84.4, 25824.0], [84.5, 25824.0], [84.6, 25995.0], [84.7, 27113.0], [84.8, 27113.0], [84.9, 27170.0], [85.0, 27170.0], [85.1, 27784.0], [85.2, 27860.0], [85.3, 27860.0], [85.4, 27912.0], [85.5, 27912.0], [85.6, 27915.0], [85.7, 27939.0], [85.8, 27939.0], [85.9, 27969.0], [86.0, 27969.0], [86.1, 28690.0], [86.2, 28770.0], [86.3, 28770.0], [86.4, 29095.0], [86.5, 29095.0], [86.6, 29322.0], [86.7, 30021.0], [86.8, 30021.0], [86.9, 30563.0], [87.0, 30563.0], [87.1, 30645.0], [87.2, 30887.0], [87.3, 30887.0], [87.4, 30901.0], [87.5, 30901.0], [87.6, 31022.0], [87.7, 31211.0], [87.8, 31211.0], [87.9, 32520.0], [88.0, 32520.0], [88.1, 32593.0], [88.2, 32708.0], [88.3, 32708.0], [88.4, 33031.0], [88.5, 33031.0], [88.6, 33142.0], [88.7, 33301.0], [88.8, 33301.0], [88.9, 35251.0], [89.0, 35251.0], [89.1, 35318.0], [89.2, 35554.0], [89.3, 35554.0], [89.4, 36291.0], [89.5, 36291.0], [89.6, 36537.0], [89.7, 37533.0], [89.8, 37533.0], [89.9, 37795.0], [90.0, 37795.0], [90.1, 38466.0], [90.2, 39132.0], [90.3, 39132.0], [90.4, 40475.0], [90.5, 40475.0], [90.6, 42039.0], [90.7, 42307.0], [90.8, 42307.0], [90.9, 43177.0], [91.0, 43177.0], [91.1, 43302.0], [91.2, 44665.0], [91.3, 44665.0], [91.4, 45182.0], [91.5, 45182.0], [91.6, 45398.0], [91.7, 45553.0], [91.8, 45553.0], [91.9, 46354.0], [92.0, 46354.0], [92.1, 47125.0], [92.2, 47570.0], [92.3, 47570.0], [92.4, 47640.0], [92.5, 47640.0], [92.6, 48345.0], [92.7, 48568.0], [92.8, 48568.0], [92.9, 49026.0], [93.0, 49026.0], [93.1, 49392.0], [93.2, 49536.0], [93.3, 49536.0], [93.4, 49681.0], [93.5, 49681.0], [93.6, 50018.0], [93.7, 50115.0], [93.8, 50115.0], [93.9, 50819.0], [94.0, 50819.0], [94.1, 51893.0], [94.2, 52496.0], [94.3, 52496.0], [94.4, 57541.0], [94.5, 57541.0], [94.6, 58726.0], [94.7, 58746.0], [94.8, 58746.0], [94.9, 58823.0], [95.0, 58823.0], [95.1, 59010.0], [95.2, 59328.0], [95.3, 59328.0], [95.4, 60741.0], [95.5, 60741.0], [95.6, 61689.0], [95.7, 62048.0], [95.8, 62048.0], [95.9, 62153.0], [96.0, 62153.0], [96.1, 62446.0], [96.2, 62498.0], [96.3, 62498.0], [96.4, 63375.0], [96.5, 63375.0], [96.6, 64086.0], [96.7, 64897.0], [96.8, 64897.0], [96.9, 65073.0], [97.0, 65073.0], [97.1, 66425.0], [97.2, 67545.0], [97.3, 67545.0], [97.4, 67690.0], [97.5, 67690.0], [97.6, 67840.0], [97.7, 71691.0], [97.8, 71691.0], [97.9, 72232.0], [98.0, 72232.0], [98.1, 72374.0], [98.2, 74599.0], [98.3, 74599.0], [98.4, 76575.0], [98.5, 76575.0], [98.6, 76725.0], [98.7, 78101.0], [98.8, 78101.0], [98.9, 78285.0], [99.0, 78285.0], [99.1, 80469.0], [99.2, 80521.0], [99.3, 80521.0], [99.4, 82174.0], [99.5, 82174.0], [99.6, 84033.0], [99.7, 134245.0], [99.8, 134245.0], [99.9, 148647.0], [100.0, 148647.0]], "isOverall": false, "label": "Steven Apply Page", "isController": false}, {"data": [[0.0, 73.0], [0.1, 73.0], [0.2, 74.0], [0.3, 74.0], [0.4, 82.0], [0.5, 86.0], [0.6, 86.0], [0.7, 91.0], [0.8, 91.0], [0.9, 94.0], [1.0, 97.0], [1.1, 97.0], [1.2, 99.0], [1.3, 99.0], [1.4, 102.0], [1.5, 105.0], [1.6, 105.0], [1.7, 106.0], [1.8, 106.0], [1.9, 106.0], [2.0, 108.0], [2.1, 108.0], [2.2, 110.0], [2.3, 110.0], [2.4, 112.0], [2.5, 114.0], [2.6, 114.0], [2.7, 118.0], [2.8, 118.0], [2.9, 118.0], [3.0, 121.0], [3.1, 121.0], [3.2, 126.0], [3.3, 126.0], [3.4, 127.0], [3.5, 131.0], [3.6, 131.0], [3.7, 132.0], [3.8, 132.0], [3.9, 139.0], [4.0, 142.0], [4.1, 142.0], [4.2, 143.0], [4.3, 143.0], [4.4, 145.0], [4.5, 146.0], [4.6, 146.0], [4.7, 146.0], [4.8, 146.0], [4.9, 146.0], [5.0, 156.0], [5.1, 156.0], [5.2, 156.0], [5.3, 156.0], [5.4, 158.0], [5.5, 160.0], [5.6, 160.0], [5.7, 166.0], [5.8, 166.0], [5.9, 168.0], [6.0, 175.0], [6.1, 175.0], [6.2, 178.0], [6.3, 178.0], [6.4, 180.0], [6.5, 180.0], [6.6, 183.0], [6.7, 189.0], [6.8, 189.0], [6.9, 194.0], [7.0, 194.0], [7.1, 195.0], [7.2, 196.0], [7.3, 196.0], [7.4, 197.0], [7.5, 197.0], [7.6, 198.0], [7.7, 200.0], [7.8, 200.0], [7.9, 208.0], [8.0, 208.0], [8.1, 210.0], [8.2, 211.0], [8.3, 211.0], [8.4, 212.0], [8.5, 212.0], [8.6, 214.0], [8.7, 216.0], [8.8, 216.0], [8.9, 217.0], [9.0, 217.0], [9.1, 217.0], [9.2, 218.0], [9.3, 218.0], [9.4, 218.0], [9.5, 218.0], [9.6, 222.0], [9.7, 222.0], [9.8, 222.0], [9.9, 223.0], [10.0, 223.0], [10.1, 227.0], [10.2, 231.0], [10.3, 231.0], [10.4, 236.0], [10.5, 239.0], [10.6, 239.0], [10.7, 240.0], [10.8, 240.0], [10.9, 242.0], [11.0, 246.0], [11.1, 246.0], [11.2, 247.0], [11.3, 247.0], [11.4, 248.0], [11.5, 248.0], [11.6, 248.0], [11.7, 260.0], [11.8, 260.0], [11.9, 261.0], [12.0, 262.0], [12.1, 262.0], [12.2, 262.0], [12.3, 262.0], [12.4, 266.0], [12.5, 267.0], [12.6, 267.0], [12.7, 268.0], [12.8, 268.0], [12.9, 269.0], [13.0, 270.0], [13.1, 270.0], [13.2, 272.0], [13.3, 272.0], [13.4, 278.0], [13.5, 278.0], [13.6, 278.0], [13.7, 285.0], [13.8, 285.0], [13.9, 290.0], [14.0, 292.0], [14.1, 292.0], [14.2, 294.0], [14.3, 294.0], [14.4, 299.0], [14.5, 305.0], [14.6, 305.0], [14.7, 312.0], [14.8, 312.0], [14.9, 320.0], [15.0, 323.0], [15.1, 323.0], [15.2, 327.0], [15.3, 327.0], [15.4, 331.0], [15.5, 335.0], [15.6, 335.0], [15.7, 340.0], [15.8, 340.0], [15.9, 344.0], [16.0, 355.0], [16.1, 355.0], [16.2, 358.0], [16.3, 358.0], [16.4, 366.0], [16.5, 368.0], [16.6, 368.0], [16.7, 371.0], [16.8, 371.0], [16.9, 373.0], [17.0, 382.0], [17.1, 382.0], [17.2, 386.0], [17.3, 386.0], [17.4, 392.0], [17.5, 396.0], [17.6, 396.0], [17.7, 398.0], [17.8, 398.0], [17.9, 400.0], [18.0, 407.0], [18.1, 407.0], [18.2, 422.0], [18.3, 422.0], [18.4, 424.0], [18.5, 424.0], [18.6, 433.0], [18.7, 436.0], [18.8, 436.0], [18.9, 436.0], [19.0, 436.0], [19.1, 446.0], [19.2, 450.0], [19.3, 450.0], [19.4, 452.0], [19.5, 452.0], [19.6, 461.0], [19.7, 467.0], [19.8, 467.0], [19.9, 469.0], [20.0, 469.0], [20.1, 481.0], [20.2, 482.0], [20.3, 482.0], [20.4, 484.0], [20.5, 484.0], [20.6, 484.0], [20.7, 486.0], [20.8, 486.0], [20.9, 496.0], [21.0, 496.0], [21.1, 506.0], [21.2, 510.0], [21.3, 510.0], [21.4, 514.0], [21.5, 514.0], [21.6, 538.0], [21.7, 540.0], [21.8, 540.0], [21.9, 549.0], [22.0, 549.0], [22.1, 554.0], [22.2, 559.0], [22.3, 559.0], [22.4, 569.0], [22.5, 569.0], [22.6, 590.0], [22.7, 605.0], [22.8, 605.0], [22.9, 618.0], [23.0, 618.0], [23.1, 624.0], [23.2, 630.0], [23.3, 630.0], [23.4, 633.0], [23.5, 633.0], [23.6, 634.0], [23.7, 665.0], [23.8, 665.0], [23.9, 667.0], [24.0, 667.0], [24.1, 682.0], [24.2, 695.0], [24.3, 695.0], [24.4, 716.0], [24.5, 716.0], [24.6, 718.0], [24.7, 727.0], [24.8, 727.0], [24.9, 738.0], [25.0, 738.0], [25.1, 750.0], [25.2, 767.0], [25.3, 767.0], [25.4, 786.0], [25.5, 786.0], [25.6, 808.0], [25.7, 817.0], [25.8, 817.0], [25.9, 825.0], [26.0, 825.0], [26.1, 840.0], [26.2, 851.0], [26.3, 851.0], [26.4, 862.0], [26.5, 862.0], [26.6, 875.0], [26.7, 907.0], [26.8, 907.0], [26.9, 913.0], [27.0, 913.0], [27.1, 916.0], [27.2, 917.0], [27.3, 917.0], [27.4, 922.0], [27.5, 922.0], [27.6, 932.0], [27.7, 963.0], [27.8, 963.0], [27.9, 980.0], [28.0, 980.0], [28.1, 982.0], [28.2, 986.0], [28.3, 986.0], [28.4, 987.0], [28.5, 987.0], [28.6, 995.0], [28.7, 1012.0], [28.8, 1012.0], [28.9, 1012.0], [29.0, 1012.0], [29.1, 1021.0], [29.2, 1032.0], [29.3, 1032.0], [29.4, 1036.0], [29.5, 1036.0], [29.6, 1079.0], [29.7, 1081.0], [29.8, 1081.0], [29.9, 1086.0], [30.0, 1086.0], [30.1, 1095.0], [30.2, 1096.0], [30.3, 1096.0], [30.4, 1136.0], [30.5, 1136.0], [30.6, 1146.0], [30.7, 1152.0], [30.8, 1152.0], [30.9, 1154.0], [31.0, 1154.0], [31.1, 1154.0], [31.2, 1169.0], [31.3, 1169.0], [31.4, 1176.0], [31.5, 1176.0], [31.6, 1180.0], [31.7, 1186.0], [31.8, 1186.0], [31.9, 1224.0], [32.0, 1224.0], [32.1, 1229.0], [32.2, 1269.0], [32.3, 1269.0], [32.4, 1285.0], [32.5, 1285.0], [32.6, 1331.0], [32.7, 1352.0], [32.8, 1352.0], [32.9, 1352.0], [33.0, 1352.0], [33.1, 1363.0], [33.2, 1369.0], [33.3, 1369.0], [33.4, 1387.0], [33.5, 1387.0], [33.6, 1411.0], [33.7, 1413.0], [33.8, 1413.0], [33.9, 1421.0], [34.0, 1421.0], [34.1, 1464.0], [34.2, 1467.0], [34.3, 1467.0], [34.4, 1498.0], [34.5, 1498.0], [34.6, 1516.0], [34.7, 1522.0], [34.8, 1522.0], [34.9, 1531.0], [35.0, 1531.0], [35.1, 1563.0], [35.2, 1591.0], [35.3, 1591.0], [35.4, 1604.0], [35.5, 1604.0], [35.6, 1611.0], [35.7, 1686.0], [35.8, 1686.0], [35.9, 1721.0], [36.0, 1721.0], [36.1, 1809.0], [36.2, 1824.0], [36.3, 1824.0], [36.4, 1879.0], [36.5, 1879.0], [36.6, 1936.0], [36.7, 1974.0], [36.8, 1974.0], [36.9, 1983.0], [37.0, 1983.0], [37.1, 1998.0], [37.2, 2034.0], [37.3, 2034.0], [37.4, 2046.0], [37.5, 2046.0], [37.6, 2079.0], [37.7, 2097.0], [37.8, 2097.0], [37.9, 2107.0], [38.0, 2107.0], [38.1, 2312.0], [38.2, 2318.0], [38.3, 2318.0], [38.4, 2324.0], [38.5, 2326.0], [38.6, 2326.0], [38.7, 2348.0], [38.8, 2348.0], [38.9, 2374.0], [39.0, 2378.0], [39.1, 2378.0], [39.2, 2383.0], [39.3, 2383.0], [39.4, 2398.0], [39.5, 2414.0], [39.6, 2414.0], [39.7, 2449.0], [39.8, 2449.0], [39.9, 2462.0], [40.0, 2474.0], [40.1, 2474.0], [40.2, 2561.0], [40.3, 2561.0], [40.4, 2567.0], [40.5, 2572.0], [40.6, 2572.0], [40.7, 2575.0], [40.8, 2575.0], [40.9, 2617.0], [41.0, 2632.0], [41.1, 2632.0], [41.2, 2636.0], [41.3, 2636.0], [41.4, 2684.0], [41.5, 2731.0], [41.6, 2731.0], [41.7, 2735.0], [41.8, 2735.0], [41.9, 2744.0], [42.0, 2779.0], [42.1, 2779.0], [42.2, 2787.0], [42.3, 2787.0], [42.4, 2847.0], [42.5, 2848.0], [42.6, 2848.0], [42.7, 2887.0], [42.8, 2887.0], [42.9, 2891.0], [43.0, 2921.0], [43.1, 2921.0], [43.2, 2957.0], [43.3, 2957.0], [43.4, 2984.0], [43.5, 3013.0], [43.6, 3013.0], [43.7, 3019.0], [43.8, 3019.0], [43.9, 3198.0], [44.0, 3208.0], [44.1, 3208.0], [44.2, 3232.0], [44.3, 3232.0], [44.4, 3254.0], [44.5, 3268.0], [44.6, 3268.0], [44.7, 3308.0], [44.8, 3308.0], [44.9, 3311.0], [45.0, 3314.0], [45.1, 3314.0], [45.2, 3322.0], [45.3, 3322.0], [45.4, 3324.0], [45.5, 3325.0], [45.6, 3325.0], [45.7, 3330.0], [45.8, 3330.0], [45.9, 3384.0], [46.0, 3400.0], [46.1, 3400.0], [46.2, 3414.0], [46.3, 3414.0], [46.4, 3421.0], [46.5, 3422.0], [46.6, 3422.0], [46.7, 3438.0], [46.8, 3438.0], [46.9, 3442.0], [47.0, 3456.0], [47.1, 3456.0], [47.2, 3474.0], [47.3, 3474.0], [47.4, 3481.0], [47.5, 3490.0], [47.6, 3490.0], [47.7, 3507.0], [47.8, 3507.0], [47.9, 3510.0], [48.0, 3522.0], [48.1, 3522.0], [48.2, 3528.0], [48.3, 3528.0], [48.4, 3558.0], [48.5, 3579.0], [48.6, 3579.0], [48.7, 3595.0], [48.8, 3595.0], [48.9, 3597.0], [49.0, 3619.0], [49.1, 3619.0], [49.2, 3629.0], [49.3, 3629.0], [49.4, 3676.0], [49.5, 3714.0], [49.6, 3714.0], [49.7, 3747.0], [49.8, 3747.0], [49.9, 3761.0], [50.0, 3763.0], [50.1, 3763.0], [50.2, 3768.0], [50.3, 3768.0], [50.4, 3794.0], [50.5, 3805.0], [50.6, 3805.0], [50.7, 3821.0], [50.8, 3821.0], [50.9, 3862.0], [51.0, 3872.0], [51.1, 3872.0], [51.2, 3885.0], [51.3, 3885.0], [51.4, 3912.0], [51.5, 3927.0], [51.6, 3927.0], [51.7, 3935.0], [51.8, 3935.0], [51.9, 3936.0], [52.0, 3947.0], [52.1, 3947.0], [52.2, 3953.0], [52.3, 3953.0], [52.4, 3953.0], [52.5, 3992.0], [52.6, 3992.0], [52.7, 4013.0], [52.8, 4013.0], [52.9, 4127.0], [53.0, 4149.0], [53.1, 4149.0], [53.2, 4172.0], [53.3, 4172.0], [53.4, 4180.0], [53.5, 4206.0], [53.6, 4206.0], [53.7, 4209.0], [53.8, 4209.0], [53.9, 4214.0], [54.0, 4218.0], [54.1, 4218.0], [54.2, 4242.0], [54.3, 4242.0], [54.4, 4278.0], [54.5, 4336.0], [54.6, 4336.0], [54.7, 4399.0], [54.8, 4399.0], [54.9, 4425.0], [55.0, 4451.0], [55.1, 4451.0], [55.2, 4470.0], [55.3, 4470.0], [55.4, 4491.0], [55.5, 4503.0], [55.6, 4503.0], [55.7, 4531.0], [55.8, 4531.0], [55.9, 4544.0], [56.0, 4549.0], [56.1, 4549.0], [56.2, 4575.0], [56.3, 4575.0], [56.4, 4593.0], [56.5, 4694.0], [56.6, 4694.0], [56.7, 4711.0], [56.8, 4711.0], [56.9, 4750.0], [57.0, 4763.0], [57.1, 4763.0], [57.2, 4786.0], [57.3, 4786.0], [57.4, 4802.0], [57.5, 4843.0], [57.6, 4843.0], [57.7, 4875.0], [57.8, 4875.0], [57.9, 4890.0], [58.0, 4899.0], [58.1, 4899.0], [58.2, 4911.0], [58.3, 4911.0], [58.4, 4918.0], [58.5, 4930.0], [58.6, 4930.0], [58.7, 4942.0], [58.8, 4942.0], [58.9, 5003.0], [59.0, 5085.0], [59.1, 5085.0], [59.2, 5087.0], [59.3, 5087.0], [59.4, 5089.0], [59.5, 5101.0], [59.6, 5101.0], [59.7, 5107.0], [59.8, 5107.0], [59.9, 5125.0], [60.0, 5213.0], [60.1, 5213.0], [60.2, 5299.0], [60.3, 5299.0], [60.4, 5322.0], [60.5, 5448.0], [60.6, 5448.0], [60.7, 5448.0], [60.8, 5448.0], [60.9, 5480.0], [61.0, 5481.0], [61.1, 5481.0], [61.2, 5643.0], [61.3, 5643.0], [61.4, 5685.0], [61.5, 5700.0], [61.6, 5700.0], [61.7, 5728.0], [61.8, 5728.0], [61.9, 5770.0], [62.0, 5819.0], [62.1, 5819.0], [62.2, 5840.0], [62.3, 5840.0], [62.4, 5954.0], [62.5, 5962.0], [62.6, 5962.0], [62.7, 5972.0], [62.8, 5972.0], [62.9, 6033.0], [63.0, 6035.0], [63.1, 6035.0], [63.2, 6057.0], [63.3, 6057.0], [63.4, 6201.0], [63.5, 6227.0], [63.6, 6227.0], [63.7, 6256.0], [63.8, 6256.0], [63.9, 6257.0], [64.0, 6294.0], [64.1, 6294.0], [64.2, 6315.0], [64.3, 6315.0], [64.4, 6341.0], [64.5, 6381.0], [64.6, 6381.0], [64.7, 6430.0], [64.8, 6430.0], [64.9, 6442.0], [65.0, 6474.0], [65.1, 6474.0], [65.2, 6481.0], [65.3, 6481.0], [65.4, 6484.0], [65.5, 6491.0], [65.6, 6491.0], [65.7, 6499.0], [65.8, 6499.0], [65.9, 6548.0], [66.0, 6610.0], [66.1, 6610.0], [66.2, 6620.0], [66.3, 6620.0], [66.4, 6695.0], [66.5, 6727.0], [66.6, 6727.0], [66.7, 6780.0], [66.8, 6780.0], [66.9, 6925.0], [67.0, 6945.0], [67.1, 6945.0], [67.2, 6955.0], [67.3, 6955.0], [67.4, 6962.0], [67.5, 7041.0], [67.6, 7041.0], [67.7, 7057.0], [67.8, 7057.0], [67.9, 7087.0], [68.0, 7107.0], [68.1, 7107.0], [68.2, 7147.0], [68.3, 7147.0], [68.4, 7164.0], [68.5, 7171.0], [68.6, 7171.0], [68.7, 7317.0], [68.8, 7317.0], [68.9, 7386.0], [69.0, 7387.0], [69.1, 7387.0], [69.2, 7401.0], [69.3, 7401.0], [69.4, 7466.0], [69.5, 7469.0], [69.6, 7469.0], [69.7, 7510.0], [69.8, 7510.0], [69.9, 7534.0], [70.0, 7543.0], [70.1, 7543.0], [70.2, 7561.0], [70.3, 7561.0], [70.4, 7664.0], [70.5, 7667.0], [70.6, 7667.0], [70.7, 7717.0], [70.8, 7717.0], [70.9, 7739.0], [71.0, 7742.0], [71.1, 7742.0], [71.2, 7750.0], [71.3, 7750.0], [71.4, 7826.0], [71.5, 7833.0], [71.6, 7833.0], [71.7, 7873.0], [71.8, 7873.0], [71.9, 7897.0], [72.0, 7898.0], [72.1, 7898.0], [72.2, 7926.0], [72.3, 7926.0], [72.4, 8048.0], [72.5, 8061.0], [72.6, 8061.0], [72.7, 8114.0], [72.8, 8114.0], [72.9, 8196.0], [73.0, 8227.0], [73.1, 8227.0], [73.2, 8270.0], [73.3, 8270.0], [73.4, 8272.0], [73.5, 8432.0], [73.6, 8432.0], [73.7, 8461.0], [73.8, 8461.0], [73.9, 8467.0], [74.0, 8508.0], [74.1, 8508.0], [74.2, 8532.0], [74.3, 8532.0], [74.4, 8579.0], [74.5, 8590.0], [74.6, 8590.0], [74.7, 8603.0], [74.8, 8603.0], [74.9, 8618.0], [75.0, 8618.0], [75.1, 8618.0], [75.2, 8668.0], [75.3, 8668.0], [75.4, 8704.0], [75.5, 8745.0], [75.6, 8745.0], [75.7, 8782.0], [75.8, 8782.0], [75.9, 8845.0], [76.0, 8853.0], [76.1, 8853.0], [76.2, 8876.0], [76.3, 8876.0], [76.4, 9050.0], [76.5, 9069.0], [76.6, 9069.0], [76.7, 9094.0], [76.8, 9094.0], [76.9, 9144.0], [77.0, 9287.0], [77.1, 9287.0], [77.2, 9289.0], [77.3, 9289.0], [77.4, 9300.0], [77.5, 9300.0], [77.6, 9369.0], [77.7, 9431.0], [77.8, 9431.0], [77.9, 9453.0], [78.0, 9453.0], [78.1, 9579.0], [78.2, 9606.0], [78.3, 9606.0], [78.4, 9727.0], [78.5, 9727.0], [78.6, 9803.0], [78.7, 9873.0], [78.8, 9873.0], [78.9, 9888.0], [79.0, 9888.0], [79.1, 9931.0], [79.2, 10086.0], [79.3, 10086.0], [79.4, 10087.0], [79.5, 10087.0], [79.6, 10100.0], [79.7, 10212.0], [79.8, 10212.0], [79.9, 10326.0], [80.0, 10326.0], [80.1, 10376.0], [80.2, 10547.0], [80.3, 10547.0], [80.4, 10596.0], [80.5, 10596.0], [80.6, 10651.0], [80.7, 10665.0], [80.8, 10665.0], [80.9, 10719.0], [81.0, 10719.0], [81.1, 10833.0], [81.2, 10849.0], [81.3, 10849.0], [81.4, 10878.0], [81.5, 10878.0], [81.6, 10984.0], [81.7, 11069.0], [81.8, 11069.0], [81.9, 11096.0], [82.0, 11096.0], [82.1, 11186.0], [82.2, 11361.0], [82.3, 11361.0], [82.4, 11580.0], [82.5, 11580.0], [82.6, 11607.0], [82.7, 11720.0], [82.8, 11720.0], [82.9, 11894.0], [83.0, 11894.0], [83.1, 11938.0], [83.2, 12176.0], [83.3, 12176.0], [83.4, 12274.0], [83.5, 12274.0], [83.6, 12319.0], [83.7, 12503.0], [83.8, 12503.0], [83.9, 12798.0], [84.0, 12798.0], [84.1, 12799.0], [84.2, 13065.0], [84.3, 13065.0], [84.4, 13345.0], [84.5, 13345.0], [84.6, 13384.0], [84.7, 13600.0], [84.8, 13600.0], [84.9, 13605.0], [85.0, 13605.0], [85.1, 13776.0], [85.2, 13776.0], [85.3, 13776.0], [85.4, 13866.0], [85.5, 13866.0], [85.6, 13987.0], [85.7, 14163.0], [85.8, 14163.0], [85.9, 14186.0], [86.0, 14186.0], [86.1, 14365.0], [86.2, 14397.0], [86.3, 14397.0], [86.4, 14448.0], [86.5, 14448.0], [86.6, 14549.0], [86.7, 14655.0], [86.8, 14655.0], [86.9, 14775.0], [87.0, 14775.0], [87.1, 14883.0], [87.2, 14952.0], [87.3, 14952.0], [87.4, 14978.0], [87.5, 14978.0], [87.6, 15110.0], [87.7, 15249.0], [87.8, 15249.0], [87.9, 15253.0], [88.0, 15253.0], [88.1, 15407.0], [88.2, 15454.0], [88.3, 15454.0], [88.4, 15547.0], [88.5, 15547.0], [88.6, 15618.0], [88.7, 15649.0], [88.8, 15649.0], [88.9, 15720.0], [89.0, 15720.0], [89.1, 15781.0], [89.2, 15948.0], [89.3, 15948.0], [89.4, 15983.0], [89.5, 15983.0], [89.6, 15991.0], [89.7, 16106.0], [89.8, 16106.0], [89.9, 16442.0], [90.0, 16442.0], [90.1, 16491.0], [90.2, 17096.0], [90.3, 17096.0], [90.4, 17290.0], [90.5, 17290.0], [90.6, 17455.0], [90.7, 17471.0], [90.8, 17471.0], [90.9, 17530.0], [91.0, 17530.0], [91.1, 17658.0], [91.2, 17910.0], [91.3, 17910.0], [91.4, 17960.0], [91.5, 17960.0], [91.6, 17980.0], [91.7, 17995.0], [91.8, 17995.0], [91.9, 18110.0], [92.0, 18110.0], [92.1, 18290.0], [92.2, 18548.0], [92.3, 18548.0], [92.4, 18824.0], [92.5, 18824.0], [92.6, 19326.0], [92.7, 19421.0], [92.8, 19421.0], [92.9, 19958.0], [93.0, 19958.0], [93.1, 20195.0], [93.2, 20270.0], [93.3, 20270.0], [93.4, 20306.0], [93.5, 20306.0], [93.6, 20332.0], [93.7, 21564.0], [93.8, 21564.0], [93.9, 21757.0], [94.0, 21757.0], [94.1, 21797.0], [94.2, 21946.0], [94.3, 21946.0], [94.4, 22860.0], [94.5, 22860.0], [94.6, 22869.0], [94.7, 23015.0], [94.8, 23015.0], [94.9, 23099.0], [95.0, 23099.0], [95.1, 25241.0], [95.2, 25621.0], [95.3, 25621.0], [95.4, 26310.0], [95.5, 26310.0], [95.6, 26438.0], [95.7, 27900.0], [95.8, 27900.0], [95.9, 29113.0], [96.0, 29113.0], [96.1, 29534.0], [96.2, 29901.0], [96.3, 29901.0], [96.4, 31563.0], [96.5, 31563.0], [96.6, 32245.0], [96.7, 33436.0], [96.8, 33436.0], [96.9, 34298.0], [97.0, 34298.0], [97.1, 37004.0], [97.2, 38059.0], [97.3, 38059.0], [97.4, 39574.0], [97.5, 39574.0], [97.6, 40040.0], [97.7, 40257.0], [97.8, 40257.0], [97.9, 45099.0], [98.0, 45099.0], [98.1, 45623.0], [98.2, 47257.0], [98.3, 47257.0], [98.4, 48751.0], [98.5, 48751.0], [98.6, 54126.0], [98.7, 56956.0], [98.8, 56956.0], [98.9, 58330.0], [99.0, 58330.0], [99.1, 60530.0], [99.2, 62235.0], [99.3, 62235.0], [99.4, 74889.0], [99.5, 74889.0], [99.6, 77233.0], [99.7, 77606.0], [99.8, 77606.0], [99.9, 112678.0], [100.0, 112678.0]], "isOverall": false, "label": "Stevens Home Page", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 41.0, "series": [{"data": [[0.0, 11.0], [67500.0, 1.0], [72300.0, 1.0], [100.0, 31.0], [33300.0, 1.0], [35300.0, 1.0], [36500.0, 1.0], [37700.0, 1.0], [43300.0, 1.0], [45300.0, 1.0], [48500.0, 1.0], [49300.0, 1.0], [50100.0, 1.0], [200.0, 24.0], [59300.0, 1.0], [62100.0, 1.0], [63300.0, 1.0], [72200.0, 1.0], [300.0, 11.0], [400.0, 5.0], [500.0, 7.0], [600.0, 2.0], [700.0, 5.0], [800.0, 2.0], [900.0, 6.0], [1000.0, 5.0], [1100.0, 7.0], [1200.0, 5.0], [1300.0, 6.0], [1400.0, 4.0], [1500.0, 3.0], [1600.0, 4.0], [1700.0, 7.0], [1800.0, 2.0], [1900.0, 1.0], [2000.0, 3.0], [2200.0, 4.0], [2300.0, 2.0], [2400.0, 3.0], [2500.0, 2.0], [2700.0, 2.0], [2800.0, 2.0], [2900.0, 1.0], [3000.0, 7.0], [3100.0, 1.0], [3300.0, 5.0], [3200.0, 1.0], [3400.0, 3.0], [3500.0, 5.0], [3700.0, 2.0], [3600.0, 5.0], [3800.0, 3.0], [3900.0, 8.0], [4000.0, 5.0], [4300.0, 4.0], [4100.0, 2.0], [4200.0, 1.0], [4600.0, 3.0], [4400.0, 2.0], [4500.0, 3.0], [4700.0, 4.0], [4800.0, 3.0], [74500.0, 1.0], [4900.0, 5.0], [5000.0, 5.0], [5100.0, 1.0], [5200.0, 2.0], [5600.0, 4.0], [5500.0, 3.0], [5400.0, 1.0], [5700.0, 3.0], [5800.0, 1.0], [5900.0, 3.0], [6000.0, 5.0], [6100.0, 1.0], [6200.0, 1.0], [6500.0, 3.0], [6600.0, 1.0], [6800.0, 2.0], [6700.0, 2.0], [6900.0, 2.0], [7000.0, 3.0], [7300.0, 4.0], [7400.0, 7.0], [7200.0, 1.0], [7500.0, 7.0], [7600.0, 5.0], [7700.0, 4.0], [7900.0, 6.0], [7800.0, 6.0], [8100.0, 1.0], [8000.0, 2.0], [8500.0, 3.0], [8600.0, 4.0], [8700.0, 3.0], [8300.0, 1.0], [8400.0, 2.0], [8200.0, 1.0], [134200.0, 1.0], [8800.0, 2.0], [8900.0, 3.0], [9100.0, 2.0], [9000.0, 2.0], [9200.0, 1.0], [9500.0, 1.0], [9400.0, 1.0], [9300.0, 2.0], [148600.0, 1.0], [9900.0, 5.0], [10200.0, 5.0], [10000.0, 6.0], [9800.0, 1.0], [10100.0, 7.0], [10600.0, 3.0], [10300.0, 4.0], [10700.0, 5.0], [10400.0, 1.0], [11200.0, 3.0], [10900.0, 1.0], [11000.0, 3.0], [11100.0, 4.0], [11400.0, 1.0], [11600.0, 2.0], [11300.0, 1.0], [11700.0, 1.0], [11500.0, 1.0], [11800.0, 1.0], [11900.0, 2.0], [12100.0, 1.0], [12000.0, 4.0], [12200.0, 2.0], [12300.0, 5.0], [12600.0, 2.0], [12700.0, 3.0], [12500.0, 4.0], [12400.0, 1.0], [12800.0, 3.0], [13000.0, 4.0], [13100.0, 1.0], [13200.0, 1.0], [13400.0, 3.0], [13500.0, 2.0], [13600.0, 1.0], [13900.0, 1.0], [14800.0, 1.0], [15300.0, 2.0], [15100.0, 1.0], [15600.0, 1.0], [15500.0, 1.0], [15400.0, 1.0], [15800.0, 1.0], [15900.0, 1.0], [16200.0, 2.0], [16600.0, 3.0], [17000.0, 1.0], [17200.0, 1.0], [16800.0, 3.0], [17600.0, 2.0], [17800.0, 1.0], [18400.0, 2.0], [18800.0, 1.0], [18600.0, 2.0], [20200.0, 1.0], [20400.0, 1.0], [20000.0, 1.0], [19800.0, 1.0], [22000.0, 1.0], [21600.0, 1.0], [22200.0, 1.0], [23200.0, 1.0], [25000.0, 1.0], [25800.0, 1.0], [25600.0, 2.0], [27800.0, 1.0], [28600.0, 1.0], [29000.0, 1.0], [30000.0, 1.0], [30600.0, 1.0], [30800.0, 1.0], [31200.0, 1.0], [31000.0, 1.0], [35200.0, 1.0], [38400.0, 1.0], [40400.0, 1.0], [42000.0, 1.0], [47600.0, 1.0], [49600.0, 1.0], [50000.0, 1.0], [50800.0, 1.0], [52400.0, 1.0], [58800.0, 1.0], [62000.0, 1.0], [61600.0, 1.0], [62400.0, 2.0], [64000.0, 1.0], [64800.0, 1.0], [66400.0, 1.0], [84000.0, 1.0], [76700.0, 1.0], [33100.0, 1.0], [35500.0, 1.0], [37500.0, 1.0], [39100.0, 1.0], [42300.0, 1.0], [43100.0, 1.0], [45100.0, 1.0], [45500.0, 1.0], [46300.0, 1.0], [47100.0, 1.0], [47500.0, 1.0], [48300.0, 1.0], [49500.0, 1.0], [57500.0, 1.0], [58700.0, 2.0], [60700.0, 1.0], [67800.0, 1.0], [78200.0, 1.0], [76500.0, 1.0], [78100.0, 1.0], [80500.0, 1.0], [82100.0, 1.0], [18100.0, 1.0], [18300.0, 1.0], [17700.0, 1.0], [18500.0, 1.0], [19300.0, 1.0], [20100.0, 1.0], [20500.0, 1.0], [21300.0, 1.0], [21500.0, 2.0], [21900.0, 2.0], [21700.0, 1.0], [22300.0, 1.0], [23300.0, 1.0], [23700.0, 1.0], [23900.0, 1.0], [25100.0, 1.0], [25700.0, 2.0], [25900.0, 1.0], [27100.0, 2.0], [27700.0, 1.0], [27900.0, 4.0], [28700.0, 1.0], [29300.0, 1.0], [30500.0, 1.0], [30900.0, 1.0], [32500.0, 2.0], [32700.0, 1.0], [33000.0, 1.0], [36200.0, 1.0], [44600.0, 1.0], [49000.0, 1.0], [51800.0, 1.0], [59000.0, 1.0], [65000.0, 1.0], [67600.0, 1.0], [71600.0, 1.0], [80400.0, 1.0]], "isOverall": false, "label": "Steven Apply Page", "isController": false}, {"data": [[0.0, 8.0], [100.0, 38.0], [39500.0, 1.0], [48700.0, 1.0], [200.0, 41.0], [54100.0, 1.0], [56900.0, 1.0], [58300.0, 1.0], [60500.0, 1.0], [300.0, 20.0], [400.0, 19.0], [112600.0, 1.0], [500.0, 10.0], [600.0, 10.0], [700.0, 7.0], [800.0, 7.0], [900.0, 12.0], [1000.0, 10.0], [1100.0, 9.0], [1200.0, 4.0], [1300.0, 6.0], [1400.0, 6.0], [1500.0, 5.0], [1600.0, 3.0], [1700.0, 1.0], [1800.0, 3.0], [1900.0, 4.0], [2000.0, 4.0], [2100.0, 1.0], [2300.0, 9.0], [2400.0, 4.0], [2500.0, 4.0], [2600.0, 4.0], [2700.0, 5.0], [2800.0, 4.0], [2900.0, 3.0], [3000.0, 2.0], [3100.0, 1.0], [3300.0, 8.0], [3200.0, 4.0], [3400.0, 10.0], [3500.0, 8.0], [3600.0, 3.0], [3700.0, 6.0], [3800.0, 5.0], [3900.0, 8.0], [4000.0, 1.0], [4300.0, 2.0], [4200.0, 6.0], [4100.0, 4.0], [4400.0, 4.0], [4500.0, 6.0], [4600.0, 1.0], [4700.0, 4.0], [4800.0, 5.0], [5000.0, 4.0], [4900.0, 4.0], [5100.0, 3.0], [5200.0, 2.0], [5300.0, 1.0], [5400.0, 4.0], [5600.0, 2.0], [5700.0, 3.0], [5800.0, 2.0], [5900.0, 3.0], [6000.0, 3.0], [6200.0, 5.0], [6300.0, 3.0], [6500.0, 1.0], [6400.0, 7.0], [6600.0, 3.0], [6900.0, 4.0], [6700.0, 2.0], [7000.0, 3.0], [7100.0, 4.0], [7300.0, 3.0], [7400.0, 3.0], [7500.0, 4.0], [7600.0, 2.0], [7700.0, 4.0], [7900.0, 1.0], [7800.0, 5.0], [8000.0, 2.0], [8100.0, 2.0], [8600.0, 4.0], [8500.0, 4.0], [8700.0, 3.0], [8200.0, 3.0], [8400.0, 3.0], [8800.0, 3.0], [9000.0, 3.0], [9200.0, 2.0], [9100.0, 1.0], [9300.0, 2.0], [9400.0, 2.0], [9700.0, 1.0], [9500.0, 1.0], [9600.0, 1.0], [9900.0, 1.0], [9800.0, 3.0], [10000.0, 2.0], [10100.0, 1.0], [10200.0, 1.0], [10300.0, 2.0], [10500.0, 2.0], [10600.0, 2.0], [10700.0, 1.0], [10800.0, 3.0], [11000.0, 2.0], [10900.0, 1.0], [11100.0, 1.0], [11300.0, 1.0], [11600.0, 1.0], [11700.0, 1.0], [11500.0, 1.0], [11900.0, 1.0], [12200.0, 1.0], [12100.0, 1.0], [11800.0, 1.0], [12700.0, 2.0], [12500.0, 1.0], [12300.0, 1.0], [13000.0, 1.0], [13300.0, 2.0], [13700.0, 2.0], [13600.0, 2.0], [13800.0, 1.0], [14300.0, 2.0], [14100.0, 2.0], [13900.0, 1.0], [14500.0, 1.0], [14600.0, 1.0], [14800.0, 1.0], [14400.0, 1.0], [14700.0, 1.0], [15200.0, 2.0], [15100.0, 1.0], [14900.0, 2.0], [15400.0, 2.0], [15700.0, 2.0], [15600.0, 2.0], [15500.0, 1.0], [15900.0, 3.0], [16100.0, 1.0], [16400.0, 2.0], [17000.0, 1.0], [17200.0, 1.0], [17400.0, 2.0], [17900.0, 4.0], [18100.0, 1.0], [18200.0, 1.0], [17500.0, 1.0], [17600.0, 1.0], [18800.0, 1.0], [18500.0, 1.0], [19400.0, 1.0], [19300.0, 1.0], [20200.0, 1.0], [19900.0, 1.0], [20300.0, 2.0], [20100.0, 1.0], [21500.0, 1.0], [21900.0, 1.0], [21700.0, 2.0], [23000.0, 2.0], [22800.0, 2.0], [25200.0, 1.0], [26400.0, 1.0], [25600.0, 1.0], [26300.0, 1.0], [27900.0, 1.0], [29100.0, 1.0], [29500.0, 1.0], [29900.0, 1.0], [31500.0, 1.0], [32200.0, 1.0], [33400.0, 1.0], [34200.0, 1.0], [38000.0, 1.0], [37000.0, 1.0], [40200.0, 1.0], [40000.0, 1.0], [45000.0, 1.0], [45600.0, 1.0], [47200.0, 1.0], [62200.0, 1.0], [77200.0, 1.0], [74800.0, 1.0], [77600.0, 1.0]], "isOverall": false, "label": "Stevens Home Page", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 148600.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 130.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 862.0, "series": [{"data": [[0.0, 208.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 130.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 862.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 1.5, "minX": 1.66865286E12, "maxY": 300.0, "series": [{"data": [[1.66865292E12, 179.9017763845349], [1.66865304E12, 1.5], [1.66865286E12, 300.0], [1.66865298E12, 10.584905660377359]], "isOverall": false, "label": "Users", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66865304E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 73.0, "minX": 1.0, "maxY": 74491.0, "series": [{"data": [[2.0, 67177.5], [3.0, 311.0], [4.0, 259.0], [5.0, 1382.0], [6.0, 1501.0], [7.0, 42077.5], [8.0, 41176.0], [10.0, 367.0], [11.0, 53710.333333333336], [13.0, 217.0], [15.0, 39144.5], [16.0, 59531.8], [17.0, 37478.0], [18.0, 118.0], [19.0, 36268.0], [21.0, 36072.0], [22.0, 195.0], [24.0, 22746.0], [25.0, 45143.33333333333], [27.0, 198.0], [28.0, 22470.333333333336], [29.0, 32482.0], [30.0, 104.0], [33.0, 25624.0], [35.0, 212.0], [34.0, 62446.0], [37.0, 338.0], [36.0, 346.0], [39.0, 37344.8], [38.0, 289.0], [41.0, 20802.0], [40.0, 62048.0], [42.0, 39520.66666666667], [45.0, 35346.0], [44.0, 240.0], [47.0, 29365.5], [46.0, 247.0], [49.0, 264.0], [48.0, 398.0], [51.0, 293.0], [50.0, 52496.0], [53.0, 178.0], [52.0, 17653.333333333336], [54.0, 50819.0], [56.0, 216.0], [59.0, 50018.0], [58.0, 24964.000000000004], [60.0, 24882.0], [63.0, 24777.5], [62.0, 78.0], [67.0, 31759.333333333332], [66.0, 124.5], [64.0, 24275.0], [69.0, 181.0], [68.0, 31313.0], [75.0, 22824.0], [72.0, 156.66666666666666], [79.0, 44665.0], [77.0, 404.0], [76.0, 45290.0], [86.0, 1227.0], [91.0, 1639.6], [89.0, 3041.0], [88.0, 291.0], [95.0, 171.0], [93.0, 89.0], [96.0, 2048.0], [101.0, 1827.0], [106.0, 1152.0], [110.0, 3363.0], [109.0, 28852.666666666668], [115.0, 1915.5], [114.0, 2384.0], [119.0, 2592.5], [116.0, 10766.0], [121.0, 2128.0], [120.0, 42307.0], [125.0, 42039.0], [134.0, 1343.0], [133.0, 4281.0], [142.0, 3874.0], [140.0, 9308.0], [150.0, 5619.5], [147.0, 3062.3333333333335], [144.0, 12922.25], [159.0, 585.0], [158.0, 17308.0], [157.0, 7083.0], [156.0, 3997.0], [154.0, 39132.0], [166.0, 12408.249999999998], [165.0, 19096.0], [175.0, 7892.0], [173.0, 6004.0], [172.0, 6124.333333333333], [171.0, 4377.0], [169.0, 235.0], [183.0, 4589.0], [182.0, 13226.0], [181.0, 20999.333333333332], [180.0, 36291.0], [177.0, 36537.0], [191.0, 4388.0], [189.0, 4013.0], [188.0, 4613.0], [187.0, 13074.333333333334], [199.0, 33301.0], [198.0, 10493.6], [197.0, 7777.0], [196.0, 534.0], [195.0, 8569.0], [194.0, 3418.4], [192.0, 5298.0], [205.0, 6618.0], [204.0, 1776.0], [203.0, 18536.0], [201.0, 15931.777777777777], [215.0, 1647.0], [214.0, 1782.0], [211.0, 4058.5], [222.0, 9996.0], [219.0, 8486.0], [218.0, 5753.0], [216.0, 17553.5], [231.0, 6280.0], [230.0, 30021.0], [229.0, 969.6], [227.0, 3688.0], [226.0, 731.0], [225.0, 15841.8], [239.0, 28770.0], [238.0, 9172.8], [237.0, 1751.0], [235.0, 4377.0], [234.0, 6813.0], [232.0, 10796.25], [247.0, 14771.0], [245.0, 27113.0], [244.0, 27939.0], [243.0, 27860.0], [242.0, 14857.0], [241.0, 16461.5], [240.0, 9819.428571428572], [254.0, 5556.0], [252.0, 3970.0], [250.0, 5191.0], [249.0, 5145.333333333333], [248.0, 14828.0], [270.0, 11567.0], [271.0, 3157.0], [269.0, 13675.0], [268.0, 7678.666666666666], [266.0, 3445.0], [265.0, 21321.333333333332], [264.0, 4054.0], [262.0, 16603.0], [259.0, 12129.0], [256.0, 18632.666666666668], [261.0, 8072.0], [284.0, 11046.5], [287.0, 3020.0], [286.0, 15477.666666666666], [285.0, 14943.0], [283.0, 12367.0], [279.0, 9453.666666666666], [273.0, 8008.857142857142], [272.0, 13186.0], [278.0, 1109.5], [277.0, 22309.0], [276.0, 5751.0], [296.0, 8551.0], [300.0, 9669.388535031849], [299.0, 12171.000000000002], [298.0, 2257.0], [297.0, 16232.0], [295.0, 9540.75], [294.0, 1411.0], [293.0, 13175.851851851856], [291.0, 5205.25], [290.0, 9132.25], [289.0, 4999.0], [288.0, 4291.5], [1.0, 74491.0]], "isOverall": false, "label": "Steven Apply Page", "isController": false}, {"data": [[206.85666666666697, 13691.400000000003]], "isOverall": false, "label": "Steven Apply Page-Aggregated", "isController": false}, {"data": [[2.0, 195.5], [3.0, 56481.5], [4.0, 39105.5], [5.0, 37960.5], [6.0, 38751.5], [7.0, 624.0], [8.0, 682.5], [9.0, 400.0], [10.0, 434.0], [11.0, 20849.666666666664], [12.0, 368.0], [13.0, 230.0], [14.0, 106.0], [15.0, 267.0], [16.0, 642.3333333333334], [17.0, 322.0], [18.0, 362.5], [19.0, 132.0], [20.0, 30365.0], [21.0, 192.33333333333334], [22.0, 250.5], [23.0, 217.0], [24.0, 366.6666666666667], [25.0, 28617.0], [26.0, 198.0], [27.0, 1387.0], [28.0, 18255.333333333336], [29.0, 13616.666666666668], [30.0, 305.0], [31.0, 380.0], [33.0, 14845.5], [32.0, 105.0], [35.0, 216.0], [34.0, 195.0], [37.0, 425.0], [36.0, 222.0], [39.0, 9490.6], [38.0, 428.0], [41.0, 932.0], [40.0, 261.0], [43.0, 194.0], [42.0, 12467.5], [45.0, 404.0], [44.0, 407.0], [47.0, 16223.666666666668], [46.0, 340.0], [49.0, 15682.333333333332], [48.0, 496.0], [51.0, 241.5], [50.0, 907.0], [53.0, 20181.5], [52.0, 158.0], [55.0, 29534.0], [54.0, 12523.0], [57.0, 189.0], [56.0, 108.0], [59.0, 91.0], [58.0, 191.5], [61.0, 73.0], [60.0, 437.5], [63.0, 197.25], [62.0, 246.0], [67.0, 188.33333333333334], [66.0, 254.66666666666666], [65.0, 142.0], [64.0, 18615.5], [71.0, 126.0], [70.0, 212.0], [69.0, 19981.0], [68.0, 121.0], [75.0, 2921.0], [74.0, 183.0], [73.0, 506.0], [72.0, 12813.333333333332], [79.0, 559.0], [78.0, 441.5], [77.0, 963.0], [76.0, 203.0], [83.0, 624.0], [82.0, 980.0], [81.0, 750.0], [80.0, 718.0], [87.0, 382.0], [86.0, 4297.0], [85.0, 987.0], [84.0, 540.0], [91.0, 1154.0], [90.0, 3442.0], [89.0, 3322.0], [88.0, 875.0], [95.0, 1096.0], [94.0, 15822.5], [93.0, 2572.0], [92.0, 11298.5], [99.0, 19470.0], [98.0, 239.0], [97.0, 4843.0], [96.0, 222.0], [103.0, 3528.0], [102.0, 1081.0], [101.0, 595.0], [100.0, 1467.0], [107.0, 9287.0], [106.0, 3013.0], [105.0, 2456.0], [104.0, 3872.0], [111.0, 6242.0], [110.0, 7856.5], [109.0, 6202.5], [108.0, 2449.0], [115.0, 2575.0], [114.0, 102.0], [113.0, 4209.0], [112.0, 3324.0], [119.0, 1021.0], [118.0, 12684.0], [117.0, 21497.5], [116.0, 6257.0], [123.0, 12563.5], [122.0, 2335.5], [121.0, 5448.0], [120.0, 99.0], [127.0, 8532.0], [126.0, 14978.0], [125.0, 6057.0], [124.0, 7667.0], [135.0, 3400.0], [134.0, 19513.0], [133.0, 4214.0], [132.0, 9069.0], [131.0, 4277.0], [129.0, 18524.0], [128.0, 8782.0], [143.0, 9050.0], [142.0, 8114.0], [141.0, 767.0], [140.0, 7510.0], [139.0, 5685.0], [138.0, 7057.0], [137.0, 588.0], [136.0, 1498.0], [151.0, 4278.0], [150.0, 3311.0], [149.0, 6315.0], [148.0, 4451.0], [147.0, 9624.0], [146.0, 469.0], [145.0, 5343.5], [144.0, 9497.0], [159.0, 7898.0], [158.0, 6491.0], [157.0, 3673.5], [156.0, 8447.5], [154.0, 6430.0], [153.0, 7164.0], [152.0, 982.0], [167.0, 7742.0], [166.0, 266.0], [165.0, 1168.0], [164.0, 7886.0], [163.0, 320.0], [162.0, 7561.0], [161.0, 5089.0], [160.0, 15267.0], [175.0, 10699.0], [173.0, 2567.0], [172.0, 3075.0], [171.0, 10171.666666666666], [170.0, 1879.0], [169.0, 682.0], [168.0, 8270.0], [183.0, 9803.0], [182.0, 7490.0], [181.0, 8214.5], [180.0, 7767.0], [179.0, 817.0], [178.0, 3821.0], [177.0, 630.0], [176.0, 7833.0], [191.0, 8845.0], [190.0, 808.0], [189.0, 9441.333333333334], [188.0, 1604.0], [187.0, 6227.0], [186.0, 3268.0], [185.0, 4127.0], [184.0, 3953.0], [199.0, 5840.0], [198.0, 8083.6], [197.0, 7326.0], [196.0, 4165.5], [195.0, 3522.0], [194.0, 11957.0], [193.0, 634.0], [192.0, 4640.0], [206.0, 2735.0], [205.0, 13634.0], [204.0, 1721.0], [203.0, 9650.666666666666], [202.0, 6780.0], [201.0, 2262.3333333333335], [200.0, 3274.0], [215.0, 13697.0], [214.0, 2848.0], [213.0, 1040.5], [211.0, 5007.5], [209.0, 8061.0], [208.0, 5824.5], [223.0, 727.0], [222.0, 1293.5], [221.0, 13332.666666666666], [220.0, 1369.0], [219.0, 1154.0], [218.0, 554.0], [217.0, 10123.5], [216.0, 10649.333333333332], [231.0, 1331.0], [230.0, 4899.0], [229.0, 9176.666666666668], [228.0, 1464.0], [227.0, 16087.2], [226.0, 18658.5], [225.0, 10759.0], [224.0, 3481.0], [239.0, 13386.5], [238.0, 9180.0], [237.0, 1802.0], [236.0, 4425.0], [235.0, 2720.5], [234.0, 913.0], [233.0, 2034.0], [232.0, 8609.2], [247.0, 9047.0], [246.0, 2887.0], [245.0, 10984.333333333332], [244.0, 6491.0], [243.0, 2847.0], [242.0, 11155.75], [241.0, 3465.5], [240.0, 2692.5], [255.0, 4875.0], [254.0, 3314.0], [253.0, 12110.666666666666], [252.0, 2398.0], [251.0, 10345.5], [250.0, 13103.0], [249.0, 9684.0], [248.0, 7531.666666666666], [270.0, 11330.5], [271.0, 9392.0], [269.0, 3254.0], [268.0, 8863.666666666666], [267.0, 7374.0], [266.0, 3763.0], [265.0, 5187.5], [264.0, 7170.0], [263.0, 9481.0], [257.0, 6447.5], [256.0, 5101.0], [259.0, 7541.0], [258.0, 2462.0], [262.0, 3019.0], [261.0, 12392.333333333334], [260.0, 8272.0], [286.0, 8914.0], [287.0, 4802.0], [285.0, 6653.25], [284.0, 7546.0], [283.0, 8503.0], [282.0, 4890.0], [281.0, 3805.0], [280.0, 4886.0], [279.0, 8443.42857142857], [273.0, 7419.25], [272.0, 2684.0], [275.0, 1012.0], [274.0, 9251.666666666666], [278.0, 8260.333333333334], [277.0, 6030.0], [276.0, 4508.0], [296.0, 6138.099999999999], [300.0, 4367.407407407408], [299.0, 5598.714285714286], [298.0, 4668.142857142857], [297.0, 3438.0], [295.0, 7901.0], [294.0, 2896.5], [293.0, 8068.055555555554], [292.0, 1611.0], [291.0, 7419.0], [290.0, 6070.333333333333], [289.0, 7974.0], [288.0, 4911.0], [1.0, 245.0]], "isOverall": false, "label": "Stevens Home Page", "isController": false}, {"data": [[172.04166666666657, 7166.468333333332]], "isOverall": false, "label": "Stevens Home Page-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 300.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 15.933333333333334, "minX": 1.66865286E12, "maxY": 2523524.95, "series": [{"data": [[1.66865292E12, 2523524.95], [1.66865304E12, 20499.4], [1.66865286E12, 392311.0333333333], [1.66865298E12, 138614.88333333333]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.66865292E12, 1900.7333333333333], [1.66865304E12, 15.933333333333334], [1.66865286E12, 367.98333333333335], [1.66865298E12, 105.35]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66865304E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 220.25, "minX": 1.66865286E12, "maxY": 70834.25, "series": [{"data": [[1.66865292E12, 13566.857831325302], [1.66865304E12, 70834.25], [1.66865286E12, 9669.388535031849], [1.66865298E12, 32631.79166666666]], "isOverall": false, "label": "Steven Apply Page", "isController": false}, {"data": [[1.66865292E12, 6964.714022140224], [1.66865304E12, 220.25], [1.66865286E12, 4363.8], [1.66865298E12, 14311.379310344826]], "isOverall": false, "label": "Stevens Home Page", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66865304E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 129.5, "minX": 1.66865286E12, "maxY": 5606.041666666666, "series": [{"data": [[1.66865292E12, 2657.554216867469], [1.66865304E12, 979.0000000000001], [1.66865286E12, 4084.006369426752], [1.66865298E12, 5606.041666666666]], "isOverall": false, "label": "Steven Apply Page", "isController": false}, {"data": [[1.66865292E12, 1167.7896678966783], [1.66865304E12, 129.5], [1.66865286E12, 1664.32], [1.66865298E12, 459.1034482758621]], "isOverall": false, "label": "Stevens Home Page", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66865304E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.66865286E12, "maxY": 1732.2993630573253, "series": [{"data": [[1.66865292E12, 580.49156626506], [1.66865304E12, 393.99999999999994], [1.66865286E12, 1732.2993630573253], [1.66865298E12, 719.6250000000001]], "isOverall": false, "label": "Steven Apply Page", "isController": false}, {"data": [[1.66865292E12, 6.154981549815501], [1.66865304E12, 39.5], [1.66865286E12, 0.0], [1.66865298E12, 43.41379310344827]], "isOverall": false, "label": "Stevens Home Page", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66865304E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 67.0, "minX": 1.66865286E12, "maxY": 148647.0, "series": [{"data": [[1.66865292E12, 72374.0], [1.66865304E12, 148647.0], [1.66865286E12, 13955.0], [1.66865298E12, 112678.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.66865292E12, 27912.6], [1.66865304E12, 148647.0], [1.66865286E12, 12739.900000000001], [1.66865298E12, 79595.40000000001]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.66865292E12, 63673.61999999997], [1.66865304E12, 148647.0], [1.66865286E12, 13665.329999999996], [1.66865298E12, 112678.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.66865292E12, 45107.299999999996], [1.66865304E12, 148647.0], [1.66865286E12, 13132.449999999999], [1.66865298E12, 82731.7]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.66865292E12, 67.0], [1.66865304E12, 110.0], [1.66865286E12, 995.0], [1.66865298E12, 74.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.66865292E12, 4303.0], [1.66865304E12, 297.5], [1.66865286E12, 9461.5], [1.66865298E12, 396.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66865304E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 215.5, "minX": 1.0, "maxY": 31525.5, "series": [{"data": [[32.0, 11064.5], [2.0, 376.5], [35.0, 5085.0], [37.0, 7382.0], [36.0, 1552.5], [47.0, 12037.0], [3.0, 836.0], [49.0, 5125.0], [4.0, 969.5], [5.0, 482.0], [6.0, 31525.5], [7.0, 18630.0], [8.0, 337.5], [9.0, 6051.0], [10.0, 695.5], [11.0, 302.0], [12.0, 215.5], [13.0, 7549.0], [14.0, 9461.5], [15.0, 246.0], [1.0, 1382.0], [16.0, 980.0], [17.0, 6727.0], [18.0, 3454.5], [19.0, 5954.0], [20.0, 5893.0], [21.0, 7386.0], [23.0, 4451.0], [24.0, 10141.0], [25.0, 875.0], [26.0, 5501.5], [27.0, 7997.0], [28.0, 3732.5], [29.0, 6491.0], [31.0, 3660.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 49.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 159.0, "minX": 1.0, "maxY": 3661.5, "series": [{"data": [[32.0, 1507.0], [2.0, 239.5], [35.0, 1378.0], [37.0, 1765.0], [36.0, 411.0], [47.0, 3080.0], [3.0, 229.0], [49.0, 1854.0], [4.0, 484.5], [5.0, 262.0], [6.0, 1822.5], [7.0, 2837.0], [8.0, 182.0], [9.0, 3251.0], [10.0, 283.5], [11.0, 178.5], [12.0, 161.5], [13.0, 3502.0], [14.0, 3661.5], [15.0, 159.0], [1.0, 556.0], [16.0, 428.5], [17.0, 1965.0], [18.0, 754.5], [19.0, 1602.0], [20.0, 1079.5], [21.0, 1453.0], [23.0, 1152.0], [24.0, 3043.0], [25.0, 242.0], [26.0, 1873.0], [27.0, 3353.0], [28.0, 1327.5], [29.0, 2468.0], [31.0, 644.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 49.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.1, "minX": 1.66865286E12, "maxY": 11.233333333333333, "series": [{"data": [[1.66865292E12, 11.233333333333333], [1.66865304E12, 0.1], [1.66865286E12, 8.033333333333333], [1.66865298E12, 0.6333333333333333]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66865304E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.13333333333333333, "minX": 1.66865286E12, "maxY": 15.95, "series": [{"data": [[1.66865292E12, 15.95], [1.66865304E12, 0.13333333333333333], [1.66865286E12, 3.033333333333333], [1.66865298E12, 0.8833333333333333]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66865304E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.06666666666666667, "minX": 1.66865286E12, "maxY": 9.033333333333333, "series": [{"data": [[1.66865292E12, 6.916666666666667], [1.66865304E12, 0.06666666666666667], [1.66865286E12, 2.6166666666666667], [1.66865298E12, 0.4]], "isOverall": false, "label": "Steven Apply Page-success", "isController": false}, {"data": [[1.66865292E12, 9.033333333333333], [1.66865304E12, 0.06666666666666667], [1.66865286E12, 0.4166666666666667], [1.66865298E12, 0.48333333333333334]], "isOverall": false, "label": "Stevens Home Page-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66865304E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.13333333333333333, "minX": 1.66865286E12, "maxY": 15.95, "series": [{"data": [[1.66865292E12, 15.95], [1.66865304E12, 0.13333333333333333], [1.66865286E12, 3.033333333333333], [1.66865298E12, 0.8833333333333333]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66865304E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

